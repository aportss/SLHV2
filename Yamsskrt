local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()
local window = library:AddWindow("FORGE [FREE]", {
    main_color = Color3.fromRGB(50, 50, 40), 
    min_size = Vector2.new(580,530),
    can_resize = true, 
    scrollable = true,
})

local infoTab = window:AddTab("INFO")
local mainTab = window:AddTab("MAIN")
local rebirthTab = window:AddTab("REBIRTH")
local teleportTab = window:AddTab("TELEPORT")
local rocksTab = window:AddTab("ROCKS")
local killsTab = window:AddTab("KILLS")
local settingsTab = window:AddTab("SETTINGS")

-- Info Tab
infoTab:AddLabel("THIS SCRIPT IS CREATED BY [MOHA & YUSUF]")
infoTab:AddLabel("THANKS FOR USING US")

local player = game:GetService("Players").LocalPlayer
local rebirths = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rebirths")
local strength = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Strength")
local durability = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Durability")
local agility = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Agility")

local initialRebirths = rebirths and rebirths.Value or 0
local initialStrength = strength and strength.Value or 0
local initialDurability = durability and durability.Value or 0
local initialAgility = agility and agility.Value or 0

infoTab:AddLabel("STATS - EARNED REBIRTHS: " .. (rebirths and rebirths.Value or "N/A"))
infoTab:AddLabel("STATS - EARNED STRENGTH: " .. (strength and strength.Value or "N/A"))
infoTab:AddLabel("STATS - EARNED DURABILITY: " .. (durability and durability.Value or "N/A"))
infoTab:AddLabel("STATS - EARNED AGILITY: " .. (agility and agility.Value or "N/A"))

infoTab:AddLabel("TITLE EARNED NOW")
local earnedRebirthsLabel = infoTab:AddLabel("EARNED REBIRTHS: 0")
local earnedStrengthLabel = infoTab:AddLabel("EARNED STRENGTH: 0")
local earnedDurabilityLabel = infoTab:AddLabel("EARNED DURABILITY: 0")
local earnedAgilityLabel = infoTab:AddLabel("EARNED AGILITY: 0")

game:GetService("RunService").RenderStepped:Connect(function()
    if rebirths then
        earnedRebirthsLabel:SetText("EARNED REBIRTHS: " .. (rebirths.Value - initialRebirths))
    end
    if strength then
        earnedStrengthLabel:SetText("EARNED STRENGTH: " .. (strength.Value - initialStrength))
    end
    if durability then
        earnedDurabilityLabel:SetText("EARNED DURABILITY: " .. (durability.Value - initialDurability))
    end
    if agility then
        earnedAgilityLabel:SetText("EARNED AGILITY: " .. (agility.Value - initialAgility))
    end
end)

-- Rebirth Tab
rebirthTab:AddLabel("REBIRTH FUNCTIONS:")

local autoRebirthState = false
local targetRebirthAmount

local targetRebirthInput = rebirthTab:AddTextBox("Target Rebirth Amount", function(value)
    targetRebirthAmount = tonumber(value)
end, {
    ["clear"] = false,
    ["placeholder"] = "Enter target rebirth amount"
})

local autoRebirthToggle = rebirthTab:AddSwitch("Auto Rebirth", function(state)
    autoRebirthState = state
    if state then
        coroutine.wrap(function()
            while autoRebirthState do
                local rebirths = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rebirths")
                if rebirths and rebirths.Value >= targetRebirthAmount then
                    print("Target rebirth amount reached:", rebirths.Value)
                    autoRebirthState = false
                else
                    game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                end
                task.wait(0.1)
            end
        end)()
        print("Auto Rebirth enabled")
    else
        print("Auto Rebirth disabled")
    end
end)

local rebirthSetButton = rebirthTab:AddButton("Set Rebirth", function()
    local r = game:GetService("ReplicatedStorage").rEvents.rebirthRemote
    local l = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rebirths")
    if l and l.Value > 18980 then
        task.wait(0.333333333333)
        r:InvokeServer("rebirthRequest")
    end
    print("Rebirth set if conditions met")
end)

-- Toggleable Set Size to 2
local isSizeSet = false
local setSizeToggle = rebirthTab:AddSwitch("Set Size to 2", function(state)
    isSizeSet = state
    if state then
        local args = {
            [1] = "changeSize",
            [2] = 2
        }
        game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer(unpack(args))
        resetSize()
        print("Size set to 2")
    else
        print("Size reset disabled")
    end
end)
setSizeToggle:Set(false)

local function resetSize()
    if not isSizeSet then return end
    local character = player.Character or player.CharacterAdded:Wait()
    if not character then
        warn("Character not found!")
        return
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        warn("Humanoid not found!")
        return
    end

    -- Check if it's R15 or R6
    if humanoid.RigType == Enum.HumanoidRigType.R15 then
        -- R15 Scaling (Only reset if too big)
        local function setScale(scaleObject, value)
            local scale = character:FindFirstChild(scaleObject)
            if scale and scale.Value > value then
                scale.Value = value
            end
        end

        setScale("BodyDepthScale", 2)
        setScale("BodyHeightScale", 2)
        setScale("BodyWidthScale", 2)
        setScale("HeadScale", 2)
        
    else
        -- R6 Scaling (If size > 2, reset it)
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") and part.Size.Magnitude > Vector3.new(2, 2, 2).Magnitude then
                part.Size = Vector3.new(2, 2, 2) -- Reset to proper size
            end
        end
    end

    print("Character reset to Size 2")
end

-- Auto apply when spawning
player.CharacterAdded:Connect(resetSize)

-- Apply immediately if the character is already loaded
if player.Character then
    resetSize()
end

-- Lock/Unlock Position Toggle with Auto-Teleport and Re-lock on Death or Rebirth
local isPositionLocked = false
local initialCFrame = nil
local lockPositionLoop = nil

-- Function to start the position lock loop
local function startLockPositionLoop()
    while isPositionLocked do
        if initialCFrame then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = initialCFrame
        end
        wait(0.1)
    end
end

-- Lock/Unlock Position Toggle
rebirthTab:AddToggle({
    Name = "Lock Client Position (BETA)",
    Callback = function(State)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        if State then
            if isPositionLocked then
                notify("Already Locked", "Your position is already locked.", 3)
                return
            end
            -- Lock position
            initialCFrame = humanoidRootPart.CFrame
            isPositionLocked = true
            if not lockPositionLoop then
                lockPositionLoop = spawn(startLockPositionLoop)
            end
            notify("Position Locked", "Your position is now locked.", 3)
            -- Automatically re-lock the position upon death or rebirth
            player.CharacterAdded:Connect(function(character)
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                wait(1) -- Small delay to ensure the character is fully loaded
                -- Teleport back to the locked position
                humanoidRootPart.CFrame = initialCFrame
            end)
        else
            isPositionLocked = false
            initialCFrame = nil
            notify("Position Unlocked", "You are free to move.", 3)
        end
    end
})

-- Teleport Tab
teleportTab:AddLabel("Teleport:")
local teleportDropdown = teleportTab:AddDropdown("Select Gym", function(selectedGym)
    local gymCoordinates = {
        ["TINY GYM"] = Vector3.new(50,7,1918),
        ["BEACH"] = Vector3.new(0, 0, 0),
        ["FROST GYM"] = Vector3.new(-2650,7,-393),
        ["MYTHICAL GYM"] = Vector3.new(20, 0, 20),
        ["ETERNAL GYM"] = Vector3.new(2392,7, 982),
        ["LEGEND GYM"] = Vector3.new(4429,991,-3880),
        ["MUSCLE KING GYM"] = Vector3.new(-8799,17,-5798),
        ["JUNGLE GYM"] = Vector3.new(-7894,6,2386),
    }
    local coordinates = gymCoordinates[selectedGym]
    if coordinates then
        print("Teleporting to", selectedGym, "at coordinates", coordinates)
        player.Character.HumanoidRootPart.CFrame = CFrame.new(coordinates)
    else
        print("Invalid Gym Selected")
    end
end)
teleportDropdown:Add("TINY GYM")
teleportDropdown:Add("BEACH")
teleportDropdown:Add("FROST GYM")
teleportDropdown:Add("MYTHICAL GYM")
teleportDropdown:Add("ETERNAL GYM")
teleportDropdown:Add("LEGEND GYM")
teleportDropdown:Add("MUSCLE KING GYM")
teleportDropdown:Add("JUNGLE GYM")

-- Main Tab
mainTab:AddLabel("AUTO FUNCTIONS:")

local function EquipTool(toolName)
    local backpack = player:FindFirstChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    if backpack then
        local tool = backpack:FindFirstChild(toolName)
        if tool then
            tool.Parent = character
            return tool
        end
    end
    return nil
end

mainTab:AddLabel("Auto Weight and Auto Pushups:")
local isAutoWeight = false

local function AutoWeight()
    while isAutoWeight do
        task.wait(0.1)
        EquipTool("Weight")
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
    end
end

mainTab:AddSwitch("Auto Weight", function(state)
    isAutoWeight = state
    if state then
        coroutine.wrap(AutoWeight)()
        print("Auto Weight enabled")
    else
        print("Auto Weight disabled")
    end
end)

local isAutoPushup = false

local function AutoPushup()
    while isAutoPushup do
        task.wait(0.1)
        EquipTool("Pushup")
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
    end
end)

mainTab:AddSwitch("Auto Pushup", function(state)
    isAutoPushup = state
    if state then
        coroutine.wrap(AutoPushup)()
        print("Auto Pushup enabled")
    else
        print("Auto Pushup disabled")
    end
end)

mainTab:AddLabel("AUTO PUNCH:")
mainTab:AddSwitch("Auto Punch", function(toggleState)
    local function Equip(t, h)
        local b, c = player:FindFirstChild("Backpack"), player.Character or player.CharacterAdded:Wait()
        if b then
            local T = b:FindFirstChild(t)
            if T then
                T.Parent = c
                if h then
                    T.Parent = b
                end
            end
        end
    end

    if toggleState then
        Equip("Punch", false)
        local punchTool = player.Backpack:FindFirstChild("Punch") or game.Workspace:FindFirstChild(player.Name):FindFirstChild("Punch")
        _G.punchanim = true

        while _G.punchanim do
            if punchTool then
                if punchTool.Parent ~= game.Workspace:FindFirstChild(player.Name) then
                    punchTool.Parent = game.Workspace:FindFirstChild(player.Name)
                end
                punchTool:Activate()
                task.wait()
            else
                _G.punchanim = false
            end
        end
    else
        _G.punchanim = false
    end
end)

mainTab:AddSwitch("Auto Fast Punch", function(toggleState)
    if toggleState then
        _G.fastPunchAnim = true
        local function FastPunch()
            while _G.fastPunchAnim do
                if _G.punchanim then
                    task.wait(0.2) -- Increased speed
                else
                    _G.fastPunchAnim = false
                end
            end
        end
        coroutine.wrap(FastPunch)()
        print("Auto Fast Punch enabled")
    else
        _G.fastPunchAnim = false
        print("Auto Fast Punch disabled")
    end
end)

-- Rocks Tab
rocksTab:AddLabel("Hit Rock:")
local rockDropdown = rocksTab:AddDropdown("Select Rock", function(selectedRock)
    local rockCoordinates = {
        ["JUNGLE ROCK"] = Vector3.new(-7696,6, -2955),
        ["MUSCLE KING ROCK"] = Vector3.new(-9040,9,-6050),
        ["LEGEND GYM ROCK"] = Vector3.new(-4188,991,-4064),
    }
    local coordinates = rockCoordinates[selectedRock]
    if coordinates then
        print("Hitting", selectedRock, "at coordinates", coordinates)
        autoHitRockCor = coroutine.create(function()
            while true do
                game:GetService("ReplicatedStorage").HitRock:FireServer(coordinates)
                task.wait(1)
            end
        end)
        coroutine.resume(autoHitRockCor)
    else
        print("Invalid Rock Selected")
    end
end)
rockDropdown:Add("JUNGLE ROCK")
rockDropdown:Add("MUSCLE KING ROCK")
rockDropdown:Add("LEGEND GYM ROCK")

-- Kills Tab
killsTab:AddLabel("Killing Content:")
local autoKillToggle = killsTab:AddSwitch("Auto Kill", function(state)
    if state then
        autoKillCor = coroutine.create(function()
            while true do
                for _, player in ipairs(game.Players:GetPlayers()) do
                    if not table.find(whitelist, player.Name) and player.Character and player.Character.Humanoid.Health > 0 then
                        KillPlayer(player.Name)
                    end
                end
                task.wait(1)
            end
        end)
        coroutine.resume(autoKillCor)
        print("Auto Kill enabled")
    else
        if autoKillCor then
            coroutine.close(autoKillCor)
        end
        print("Auto Kill disabled")
    end
end)

killsTab:AddLabel("Kill Specific Player:")
local killPlayerDropdown = killsTab:AddDropdown("Select Player to Kill", function(selectedPlayer)
    KillPlayer(selectedPlayer)
end)

local whitelist = {}

local whitelistDropdown = killsTab:AddDropdown("Whitelist Player", function(selectedPlayer)
    table.insert(whitelist, selectedPlayer)
    print("Added to whitelist:", selectedPlayer)
end)

local function KillPlayer(playerName)
    local player = game.Players:FindFirstChild(playerName)
    if player and player.Character then
        player.Character.Humanoid.Health = 0
        print("Killed player:", playerName)
    end
end

for _, player in ipairs(game.Players:GetPlayers()) do
    whitelistDropdown:Add(player.Name)
    killPlayerDropdown:Add(player.Name)
end

game.Players.PlayerAdded:Connect(function(player)
    whitelistDropdown:Add(player.Name)
    killPlayerDropdown:Add(player.Name)
end)

game.Players.PlayerRemoving:Connect(function(player)
    whitelistDropdown:Remove(player.Name)
    killPlayerDropdown:Remove(player.Name)
end)

-- Settings Tab
settingsTab:AddLabel("GRAPHICS SETTINGS:")

settingsTab:AddSwitch("Low Graphics", function(state)
    if state then
        game.Lighting.GlobalShadows = false
        game.Lighting.FogEnd = 9e9
        game.Lighting.Brightness = 0
        settings().Rendering.QualityLevel = "Level01"
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Material = Enum.Material.Plastic
                v.Reflectance = 0
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = NumberRange.new(0)
            elseif v:IsA("Explosion") then
                v.BlastPressure = 1
                v.BlastRadius = 1
            end
        end
        print("Low Graphics enabled")
    else
        game.Lighting.GlobalShadows = true
        game.Lighting.FogEnd = 100000
        game.Lighting.Brightness = 2
        settings().Rendering.QualityLevel = "Level21"
        for _, v in pairs(game:GetDescendants()) do
            if v:IsA("BasePart") then
                v.Material = Enum.Material.SmoothPlastic
                v.Reflectance = 0.2
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = NumberRange.new(1)
            elseif v:IsA("Explosion") then
                v.BlastPressure = 500000
                v.BlastRadius = 10
            end
        end
        print("Low Graphics disabled")
    end
end)

settingsTab:AddLabel("Remove Frames:")
settingsTab:AddSwitch("Remove Frames", function(state)
    local uiFrames = {
        "StrengthFrame",
        "DurabilityFrame",
        "AgilityFrame",
        "EnergyFrame",
        "EnduranceFrame"
    }
    for _, frameName in ipairs(uiFrames) do
        local frame = player.PlayerGui:FindFirstChild(frameName)
        if frame then
            frame.Visible = not state
        end
    end
    
  local replicatedStorage = game:GetService("ReplicatedStorage")

    local durabilityFrame = replicatedStorage:FindFirstChild("durabilityFrame")
    local strengthFrame = replicatedStorage:FindFirstChild("strengthFrame")
    local agilityFrame = replicatedStorage:FindFirstChild("agilityFrame") 

    if durabilityFrame then
      durabilityFrame:Destroy()
    end

    if strengthFrame then
        strengthFrame:Destroy()
    end

    if agilityFrame then
        agilityFrame:Destroy()
    end

    print("Frames visibility set to:", not state)
end)

--Anti-Afk
settingsTab:AddButton("Enable Anti-AFK", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn"))()
end)
